// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  STAFF
  ADMIN
}

// tai khoan
model Account {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  role      Role
  createdAt DateTime @default(now())
  patient   Patient?
  doctor    Doctor?
  staff     Staff?
  isDeleted Boolean  @default(false)
}

// nhan vien
model Staff {
  id         Int       @id @default(autoincrement())
  accountId  Int       @unique
  dob        DateTime?
  gender     String?
  fullName   String?
  position   String?
  phone      String?
  department String?
  account    Account   @relation(fields: [accountId], references: [id])
  isDeleted  Boolean   @default(false)
}

// benh nhan
model Patient {
  id                Int             @id @default(autoincrement())
  accountId         Int             @unique
  fullName          String
  dob               DateTime?
  gender            String?
  phone             String?
  address           String?
  citizenId         String          @unique
  healthInsuranceId String?
  account           Account         @relation(fields: [accountId], references: [id])
  appointments      Appointment[]
  prescriptions     Prescription[]
  bills             Bill[]
  medicalRecords    MedicalRecord[]
  TestResult        TestResult[]
  isDeleted         Boolean         @default(false)
}

// bac si

enum Department {
  KHOA_NOI_TONG_QUAT
  KHOA_NGOAI
  KHOA_NHI
  KHOA_HOI_SUC_CAP_CUU
}

model Doctor {
  id             Int     @id @default(autoincrement())
  accountId      Int     @unique
  userId         String  @unique
  fullName       String?
  specialization String?
  phone          String?
  avatar         String?

  department     Department
  account        Account         @relation(fields: [accountId], references: [id])
  appointments   Appointment[]
  prescriptions  Prescription[]
  bills          Bill[]
  medicalRecords MedicalRecord[]
  TestResult     TestResult[]
  isDeleted      Boolean         @default(false)
}

// lich kham
enum AppointmentStatus {
  NOTCOMFIRM
  CONFIRMED
  CANCELED
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patientId       Int
  doctorId        Int?
  appointmentDate DateTime
  status          AppointmentStatus @default(NOTCOMFIRM)
  symptoms        String? // mô tả triệu chứng bệnh

  patient       Patient        @relation(fields: [patientId], references: [id])
  doctor        Doctor?        @relation(fields: [doctorId], references: [id])
  medicalRecord MedicalRecord?
  isDeleted     Boolean        @default(false)
}

// trang thai don thuoc
enum PrescriptionStatus {
  CANCELLED
  UNPAID
  PAID
}

// don thuoc
model Prescription {
  id                    Int                    @id @default(autoincrement())
  patientId             Int
  doctorId              Int
  note                  String?
  createdAt             DateTime               @default(now())
  billId                Int?
  totalCost             Decimal?
  patient               Patient                @relation(fields: [patientId], references: [id])
  doctor                Doctor                 @relation(fields: [doctorId], references: [id])
  prescriptionMedicines PrescriptionMedicine[]
  bill                  Bill?                  @relation(fields: [billId], references: [id])
  isDeleted             Boolean                @default(false)
}

// Bảng trung gian
model PrescriptionMedicine {
  id             Int      @id @default(autoincrement()) // ID riêng cho mỗi bản ghi
  prescriptionId Int
  medicineId     Int
  quantity       Int // số lượng kê trong đơn
  priceAtTime    Int // Giá thuốc tại thời điểm kê đơn (để tránh ảnh hưởng khi giá thuốc thay đổi)
  note           String?
  createdAt      DateTime @default(now()) // Thời gian thêm thuốc vào đơn

  prescription Prescription @relation(fields: [prescriptionId], references: [id])
  medicine     Medicine     @relation(fields: [medicineId], references: [id])

  @@unique([prescriptionId, medicineId]) // Vẫn đảm bảo mỗi thuốc chỉ xuất hiện 1 lần trong đơn
}

enum Unit {
  PILL
  BOTTLE
  CAPSULE
  INJECTION
}

// thuoc
model Medicine {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  unit                  Unit                   @default(PILL) // đơn vị (viên, chai, ống...)
  price                 Int // giá mỗi đơn vị
  stock                 Int // số lượng trong kho
  note                  String?
  prescriptionMedicines PrescriptionMedicine[]
  isDeleted             Boolean                @default(false)
  importedPharmacy      String
}

// xet nghiem
model TestResult {
  id             Int      @id @default(autoincrement())
  patientId      Int
  doctorId       Int
  billId         Int?
  testDate       DateTime @default(now())
  testName       String? // tên xét nghiệm
  testType       String? // loại xét nghiệm (máu, nước tiểu, etc.)
  result         String? // kết quả xét nghiệm
  interpretation String? // nhận xét của bác sĩ
  note           String?
  totalCost      Decimal?
  patient        Patient  @relation(fields: [patientId], references: [id])
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  bill           Bill?    @relation(fields: [billId], references: [id])
  isDeleted      Boolean  @default(false)
}

// hoa don
enum BillStatus {
  PENDING
  PAID
  CANCELLED
}

model Bill {
  id              Int        @id @default(autoincrement())
  patientId       Int
  doctorId        Int
  medicalRecordId Int        @unique
  totalCost       Decimal?
  status          BillStatus @default(PENDING)
  createdAt       DateTime   @default(now())
  paidAt          DateTime?

  patient       Patient        @relation(fields: [patientId], references: [id])
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  medicalRecord MedicalRecord  @relation(fields: [medicalRecordId], references: [id])
  prescriptions Prescription[]
  testResults   TestResult[]
  isDeleted     Boolean        @default(false)
}

// so kham benh
model MedicalRecord {
  id            Int      @id @default(autoincrement())
  patientId     Int
  doctorId      Int
  appointmentId Int      @unique
  createdAt     DateTime @default(now())
  diagnosis     String? // chẩn đoán
  symptoms      String? // triệu chứng
  note          String?

  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  bill        Bill?
  isDeleted   Boolean     @default(false)
}

model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
}
